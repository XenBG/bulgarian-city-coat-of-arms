%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 14.0.0
%%For: (user05) ()
%%Title: (Gerb Slivnitsa.eps)
%%CreationDate: 6/22/2010 4:21 PM
%%Canvassize: 16383
%%BoundingBox: 52 32 546 809
%%HiResBoundingBox: 52.5962 32.2676 545.7119 808.2314
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 298.5 420.3906 298.5 420.3906
%AI3_TileBox: -123.3525 123.3447 718.5078 718.3647
%AI3_DocumentPreview: Header
%AI5_ArtSize: 595.2754 841.8901
%AI5_RulerUnits: 4
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -203.8623 864.4453 1 1011 869 26 0 0 44 116 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-411.0225 -103.4648
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 84 128 8
%%BeginData: 20525 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFFF7D272727527DFD05FF7D2727A8FFFFFFA82752A8FFFFA82727
%52FF7D272752275252A8FFFFA82727FD04FF5227A8FF5227A8FFFFFF5227
%52FFA82752FD04FF522752FD05FF27277DFD05FF7DF827F827F82752FD04
%FF52F82752FFFFFF7D27F8A8FFFF5227F852FF7DF827F827F827F87DFFA8
%F827A8FFFFFF27277DFF27277DFFFF7DF827F8FFA827F8FD04FF52F852FD
%04FF5927F852FD04FFA8F82752FFA87D2727A8FFFFA9F8272727A8FFFFA8
%F827A8FFA827272752FF7D2752FFA8FF522727FF842727FD04FF52F8A8FF
%27F8A8FFFFFD0427FFA82727A8FFFFFF522752FD04FF52F82727A8FFFFFF
%522727FFFFFFA852277DFFFF7D272752F87DFFFF7D27F8A8FF53F827F852
%FF7DF87DFFFFFF7DF827FFA8F827FD04FF27277DFF27277DFF7D27F82727
%FF7D27F8FD04FF52F852FFFFFFA8F828272753FFFFFF27207DFD09FF5220
%A87D2752FFFFA82027A8FF2052522752FF7D27277E7D7D27277DFFA82727
%FD047D2720A8FF5220A8FF52277D2727FFA82727FD04FF522752FFFFFF7D
%277DA82752FFFFFFF8277DFD08FFA8F827A8A8F827A8FF7D27F8FF59277D
%7DF852FF7DF827F827F82727FFFFA8F827F827F827F8277DFF27277DA8F8
%7D7D2727FF7D2720FD04FF52F852FFFFA828F8A8FF27F8A8FFFF27277EFD
%08FF532752FFA84C277DFFA827277D2727FF522752FF7D27527D7D7D5227
%27FFA827F8A87DA87D4C27A8FF5227A85227A8A8F827FFA8F827FD04FF52
%2752FFFFA8F84CA8A8522752FFFF272752FD04FF5227A8FF52F87DFFFF52
%2727FF7D272752F87DFF53F852FF7DF87DFD04FF27277DA8F827FD04FF27
%277DFF2727522752FF7D27F8FF7E27F8FD04FF52F852FFFF5227F827F827
%F827A8FF7D27277DFFFF7D2027A8FF2027A8FFFFA82727A8A827272052FF
%FF522752FF7D2752FFFFFFA82720A8A82727FD04FF5227A8FF52272720FF
%FFA82027FFA82027FD04FF522752FFFF2720FD04522727A8FFA827F82752
%52F82752FF522727FFFFFFA827F87DA827F8277DFFFF7DF852FF7DF82752
%525227F827A8A8F827A8FFFFFF27277DFF2727F852FFFF7D27F8FFA827F8
%FD045227F827527DF828FD04FF522752FFFFA8522727F82752FFFF52277D
%FD04FF522752A8F82727FFFFFF522728FF7D27F8272727F827A8FF7D2727
%FD04FF52F8A8FF27F827A8FFFFA82727FFA82727F8272727F8FD05277DFD
%04FFA8F827A8FFFFFFA87D7D7EFFFFFF7DA8A8FD04FFA87DA8A8A87DA8FF
%FFFFA87DA8FFFF7DA87DA87DA8A8FFFFFF7DA8FD04FFA8A8A8FFA8A8A8FF
%FFFFA8A87EFFA8A87DA87DA87DA87D2727A8A8FD06FFA8A8FD48FF2727FD
%52FFA87DFD0BFFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%A8F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F87D2727272027
%272720272727202727272027272720272727202727272027272720272727
%202727272027272720272727202727272027272720272727202727272027
%2727202727272027272720272727202727277DF827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F88427F8272727F8272727F8272727F8272727
%F8272727F8272727F8272727F8272727F8272727F8272727F8272727F827
%2727F8FD0727F8272727F8272727F8272727F8272727F8272727F8272727
%F8277DF827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F82727525284A8AF7D27F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F8A8272027
%272720272727202727272027272720272727202727272027272720272727
%20272727202727272027272759A8FD09FF59202727272027272720272727
%20272727202727272027272720277DF827F827F827F827F827F827F827F8
%27F827F827F827F8277DA82727F827F827F827F827F827F8272752277DA8
%FD0CFF52F827F827F827F827F827F827F827F827F827F827F827F827F8A8
%272727F8272727F8272727F8272727F8272727F82727277DFFFFA8F82727
%27F8272727F827277D7DFD05FF52527DFD09FF7D27F8272727F8272727F8
%272727F8272727F8272727F82727277DF827F827F827F827F827F827F827
%F8527DA884A95227F8A8FFFFFF52F827F827F827F827F852FD07FF7DF827
%7DFD08FF53F827F827F827F827F827F827F827F827F827F827F827F827F8
%7E2727272027272720272727202727277DFD05FF52277DFFFFFF28272727
%20272727202727FD07FFA8A8FD09FFA82727202727272027272720272727
%2027272720272727202727277DF827F827F827F827F827F827F827F87DFD
%06FF527DFFFFFF27F827F827F827F827F852FD12FFF8272727F827F827F8
%27F827F827F827F827F827F827F827F827F88427F8272727F8272727F827
%2727F82752FD0BFF2727F8272727F8FD0427FD11FF52277D7D2727F82727
%27F8272727F8272727F8272727F8272727F8277DF827F827F827F827F827
%F827F827F827277D59FD07FF7D27F827F82752A82727F828FD05FFA852A8
%FD08FF52277DFF2727F827F827F827F8272727F827F827F827F827F827F8
%27F8A82720272727202727272027272720272727202752FD06FFA8272720
%272752FFFF272720A8FD04FF522720FD07FF7D277DFFA827272720272752
%7DFFFFFFA8A85227202727272027272720277DF827F827F827F827F827F8
%27F827F827277D5252A8FD05FFA827F827F82752FFFF7DF827F87D7D7D52
%27F8277DFD05FF7D277DFFFF7DF827F827F87DFD08FF7D27F827F827F827
%F827F8A8272727F8272727F8272727F8272727F8A8FD0AFF52272727F87D
%FFFFA8522727F8FD0627FD05FF52277DFFFFFF277D272727A8FD04FFA8FD
%05FF7D27F8272727F82727277DF827F827F827F827F827F827F827F87DA8
%FD0AFFA8F827F82752FD05FF522727FFAFFFA8FD04FFA827277DFFFFFF27
%7DA827F8A8FD04FF5227F852A8FFFFFF2727F827F827F827F87E27272720
%2727272027272720272752FD0DFFA8272720277DFFA8A852272027A8FD05
%FFA87D2752A8FFFFFF527DFFA82052FFFFFFA8272720272727A8FFFF7D20
%272727202727277DF827F827F827F827F827F827F827F87DFFFFA8527DFD
%08FFA8F827F827F827F827F827F8527DA87D7D272727A8FD04FF5252FFFF
%27277DFFFFA8F827F827F827F852FFFF7D27F827F827F827F88427F82727
%27F8272727F8272727F827277D7D52272752FD08FFA82727F8272727F827
%2727F827275252A8A8FD05FF2752FFFF522727FFFFFF7D27F8272727F827
%27FFFFA82727F8272727F8277DF827F827F827F827F827F827F827F827F8
%27F82727A8FD09FFA8F827F827F827F82727527DA8FD07FF7DF852FFFF7D
%27F852FFFFFF52F827F827F827F827A8FF7D27F827F827F827F8A8272027
%27272027272720272727202727272027277DFD0BFF7D20FD04277DA8FD09
%FF7D52277DFFFFA827275252FFFFFF522720272727202727FFFFA8272720
%27272720277DF827F827F827F827F827F827F827F827F827F82752FFFFFF
%A8A8FD06FF7D27F8527DFD09FF7D7DF82752FFFFFFA82727A82727A8FFFF
%7DF827F827F827F8A8FFFF5227F827F827F827F8A8272727F8272727F827
%2727F8272727F8272727F827277E7D2727FD05FF522727A8FD08FFA87D27
%27277DA8FFFFFFA827F8FFA827F8A8FFFF7D2727277D7D7DA8FFFFA827F8
%272727F82727277DF827F827F827F827F827F827F827F827F827F827F827
%F827F82759FFFFFF272752FD09FF5227F859A8FD05FF5927F8A8FF52F827
%2EFFFFA8F82727FD06FFA8F827F827F827F827F87E272727202727272027
%272720272727202727272027272720272727A8FF522752FD08FFA827277D
%FD06FFA8272752FFFFA827272027A8FFFF7D2727A8FD05FF7D2720272727
%202727277DF827F827F827F827F827F827F827F827F827F827F827F827F8
%27F852272752FD07FFA852F87DFD07FF7DF8527EFFFFFF2727F827F852FF
%FF7D27F87DFD05FF7DF827F827F827F827F88427F8272727F8272727F827
%2727F8272727F8272727F8272727F8FD0427FD07FF7D2727FD08FF52F8A8
%FD04FF7D27F8272727F8A8FFFF272752FD05FF52272727F8272727F8277D
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F852
%A8FD05FF522752FD07FF7D2727AFFD04FF7D27F827F827F82727FFFF7DF8
%52FD05FFA8F827F827F827F827F8A8272027272720272727202727272027
%272720272727202727272027272720277DFFFFA8272753FD07FF7D277DFD
%05FFA85227272027272720277DFFFF5227A8FD05FF522727202727272027
%7DF827F827F827F827F827F827F827F827F827F827F827F827F82752FFA8
%52F8272752F82752FD07FF52277DFD06FF52F827F827F827F827F827A8FF
%7D2727A8FFFF7E52F827F827F827F827F8A8272727F8272727F8272727F8
%A8FFA8FD0427F8272727F852A8FD04FFA8FD0427F8FD07FF2727A8FD06FF
%7D2727F8272727F8272727F853FFFF27272752FD0427F8272727F8272727
%7DF827F827F827F827F82752A8FD04FF2727F827F82752A8FD08FF5227F8
%2727A8FFFFFFA82027A8FD05FFA852F827F827F827F827F827F827F8A8FF
%7DF827F827F827F827F827F827F827F87E27272720272727202727FD07FF
%A8A87DA8FD0CFFA87D27272752527D272752A87DA87DA87D522027272720
%27272720272727202752FFFF5227272027272720272727202727277DF827
%F827F827F827F8277DFD19FF7D7D2727F8272127F827F827F827F827F827
%F827F827F827F827F827F8277DFF7D27F827F827F827F827F827F827F884
%27F8272727F8272727F85284A87DFD10FFA87DFD09FFA8FFA8AFA8FFA8FF
%A8522727F8272727F8272727F8272727F852FFFFFD0427F8272727F82727
%27F8277DF827F827F827F827F827F827F82752FD0DFF7D52F852FD12FF7D
%27F827F827F827F827F827F827F827F87EFF7DF827F827F827F827F827F8
%27F8A8272027272720272727202727527DFD0CFFA82727202752FD13FF52
%27202727272027272720272727202752FFA8272727202727272027272720
%277DF827F827F827F827F827F87DFD0EFF5227F827F87DFF7E52FD11FF27
%27F827F827F827F827F827F827F827A8FF2727F827F827F827F827F827F8
%A8272727F8272727F8272752FD0FFFA8F8FD04277D277DFD11FFA82727F8
%272727F8272727F8272727F8A8FF7DF8272727F8272727F82727277DF827
%F827F827F827F82727FD04FF7D7DFD04FFA8A8FFFFA82127F827F827F827
%53FF59FD10FF59F827F827F827F827F827F827F82752FF7D27F827F827F8
%27F827F827F87E2727272027272720272727FFFFFFA8207DFD04FF52277D
%FF5227202727272027274C272752A8FD0FFF522027272720272727202727
%27207DFFA82027272720272727202727277DF827F827F827F827F827F87D
%A8A827277DFD04FF52F827F827F827F827F827F827F827F827F8527DFD0D
%FFA827F827F827F827F827F827F8277DFF7D27F827F827F827F827F827F8
%8427F8272727F8272727F8272727F827277DFD04FF52272727F8272727F8
%272727F8272727F8FD04275252A8FD0AFF7D27F8272727F8272727F82727
%FFFFA82727F8272727F8272727F8277DF827F827F827F827F827F827F827
%F827277DFFFFA827F827F827F827F827F827F827F827F827F827F827F827
%F852A8FD09FF7D27F827F827F827F82727A8FFFF5327F827F827F827F827
%F827F8A8272027272720272727202727272027272720A8A8522027272720
%27272720272727202752FD057D525227272052A8FD09FF7D272727202727
%527DFD04FF522727202727272027272720277DF827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F82752A8A8FD09FF7D27F8
%52FD0AFFA8A884A8A8FD06FFA8F827F827F827F827F827F827F8A8272727
%F8272727F8272727F8272727F8272727F8272727F8272727F8FD0427FD0D
%FFA852F8A8FD14FF2727F8272727F8272727F82727277DF827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827A8FD0DFFA8
%2752FD12FFA82727F827F827F827F827F827F827F87E2727272027272720
%2727272027272720272727202727272027272720FD0427FD0EFFA8207DFD
%10FFA87D202727272027272720272727202727277DF827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827A8FD0DFF27277D
%FD08FFA87D7D7DA87D7D2727F827F827F827F827F827F827F827F827F884
%27F8272727F8272727F8272727F8272727F8272727F8272727F8272727F8
%2727A8FD0CFF522752FD08FFA8F8272727F8272727F8272727F8272727F8
%272727F8272727F8277DF827F827F827F827F827F827F827F827F827F827
%F827527D2727F827F827F8277DFD09FFA8FF7D2727FD09FF7D27F827F827
%F827F827F827F827F827F827F827F827F827F827F8A82720272727202727
%27202727272027272720FD0427FFFFFFA85227272027277DFD06FF7D5227
%52522727FD0AFFA820272727202727272027272720272727202727272027
%272720277DF827F827F827F827F827F827F827F827F827F827F87DFD04FF
%5927F827F82752FD05FF7D27F827F82727A8FD0AFF7D27F827F827F827F8
%27F827F827F827F827F827F827F827F827F8A8272727F8272727F8272727
%F8272727F8272727F82752FD04FFA8F8272727F852FD05FFA8F8272727F8
%7DFD0BFFA82727F8272727F8272727F8272727F8272727F8272727F82727
%277DF827F827F827F8527DA85227F827F827F827F827F82752FD04FF52F8
%27F8277DFD06FF7EF827F82752FD0BFFA87D5252F827F827F827F827F827
%F827F827F827F827F827F827F87E27272720272727A8FFFFFF2027272720
%FD04277D522752FFFFFFA827272752FD08FF5327272052FD10FF52272027
%27272027272720272727207D7D27202727277DF827F827F85252A8FFFFA8
%52F827F827F82727A8FFFFA87DA8FFFFFF7D527DFD09FF2727F827F87DFD
%10FF2727F827F827F827F827F827F827A8FF5227F827F88427F8272727A8
%FD06FF7DF8272727F884FD14FFA827F8272727F852A8FD0EFF522727F827
%2727F8272727F8277DFFFFA82727F8277DF827F827F8A8FD06FF7D27F827
%F827A8FD15FFF827F827F827F827277DA8FD0BFF5227F827F827F827F827
%F82728FFFFFFA827F827F8A8272027272752FD06FFA820272727207DA8AF
%7D7DA8FD0CFFA87DFFFF52202727272027272720527DFD0BFF522720FD07
%2720A8FD04FF272720277DF827F827277DA8FD05FFFD0427F827F827F827
%F8A8FD09FFA8FFFF7D27277D2727F827F827F827F827F82752FD07FFA8FF
%FF7DF827F8277DFF7D27F852FD04FFA827F827F8A8272727F87DFD06FF52
%27A8FFA8522727F82727A9FD08FFA852277DA8A82727F8272727F8272727
%F8272727F827A8FD05FF7D272752FD0427A8FFFFFF7D277DFD05FFF82727
%277DF827F82752FD06FF5259FFFFFFA827F827F8A8FFFFA8FD06FF7DF827
%F827F827F827F827F827F827F827F827F82727FD07FF2E27F827F827F8FD
%04FFA8F8AFFD04FFA827F827F87E2727272052277DFD04FF52A8FD04FF27
%272027A8FFFFFFA87D7DFFFFFFA827272720272727202727527DA8532720
%2727272052FD08FF2727202727277DFFFFFF5252FD05FFA8202727277DF8
%27F827F8527DFD04FF7D27FFFFFF5227F827F852FFFFFF7DF852FFFFFF7D
%F827F827F827F827F827A8FFFFFF5352F827F8277DFD05FFA8522727F827
%F827F82752A8522752FD05FF7D27F827F88427F8272727A8FD05FFA82727
%7D5227F8FD0427FFFFA8272727A8FF7D2727F8272727F82727277DFD07FF
%7D7D7DFD06FF7D2727F8272727F8272727F827277DFFFFA8A87D522727F8
%277DF827F827F8527DFFFFFF7D525227F827F827F827F8272752F827F827
%F827F827F827F827F827F82727FD10FFA8F827F827F827F827F827F85227
%277DFF7D27527D5227F827F8A82720272727202727FFFF527DFFFF52277D
%FD042720272727202727272027272720272727202727277DFD0FFF522727
%27202727272027277DFF7D2784FF277DFFFFFF7D2720277DF827F8527DFF
%7D27277DF8FFFFFFA8FFFF7EF827F827F827F827F827F827F827F827F827
%F827F827F827527D52527DFD0AFFA85227F827F827F827F87DFFFF7D277D
%A8F8FD04FFA8F827F8A82727277DFFFFFF7D272727A8FD05FF7D27F82727
%27F8272727F8272727F8272727F8272727F8272727F82727FD0DFFFD0427
%F8272752FFFFFFA8F884FF277DFFFFFF7D2727277DF827F8A8FFFFFFA8F8
%27F82752FD04FF522752F827F827F827F827F827F827F827F827F827F827
%F8277DFFA8FD0DFFA827F827F827F827A8FFFFFFA82752FF27277DFF7D27
%F827F87E27272759FFFFFF522752A87D272784FFFFA8FFFF522727202727
%2720272727202727272027272720277DFD0BFFA852A8FFFF7D2027272720
%2752FD05FF5227272720272727202727277DF827F827527D522759FFFFFF
%7D7D277DFD04FF2727F827F827F827F827F827F827F827F827F827F8A8FD
%04FF7D7DA8FD04FF52F85252522727F827F827F8A8FD04FFA852F827527D
%2727F827F827F88427F8272727F82727FD06FFAF277DFFFFFF27F8272727
%F8272727F8272727F8272727F82727277DFFFFFFA8272784FFFFFFA8F827
%2727F8272727F8272752FD04FF7D27277DA8FFA827F8272727F8277DF827
%F827F827F8277DFD06FF27F87DFFFF7D7D2727F827F827F827F827F827F8
%27F827F827F87DFFFFFF7DF8277DFFFFFFA827F827F827F827F827F8277D
%FFFFFF522752FD04FF7DF827F827F827F8A827202727272027277DFD05FF
%A8277D27A8FFFFFFA8272720272727202727272027272720FD04277D847D
%2027277DFD04FFFD042720272727202752FFFFFF522784FD05FF52272027
%272720277DF827F827F827F827A8FD05FF5284FF7DF8FFFFFF7D27F827F8
%27F827F827F827F827F827F827F827F827F827F827F8A8FFFF7D27F827F8
%27F827F827F8A8FFFF5252A8FD05FFA827F827F827F827F8A8272727F827
%2727F87DFD09FF2727FFFFA8F8A8A87DF8272727F8272727F8272727F827
%2727F8272727F8275253FD0427F827272752272752FFFF5252FD07FF7DF8
%272727F82727277DF827F827F827F827F827207DFD05FF7DF87D52FF527E
%FFFFFF52F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F852A8FFA85227FF5227A8FD06FFA8F827F827F827F827F87E272727
%202727272027275384FD05FF7DA8FF272727FD04FF7D2727272027272720
%272727202727272027272720272727202727272027A8FFFFFFA82752277D
%FD07FF272720272727202727277DF827F827F827F827F8277DFD09FF5227
%F8A8FFFFFF52F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F8A8FFFFFFA8F82752FD07FF2727F827F827F827F827F88427F8
%272727F8272727F827A8FF7DA8FD05FFA8F8272784A87D272752FF7D2720
%272727F8272727F8522727F8272727F8272727F827272752FFFFFF522752
%FD07FF5227F8272727F8272727F8277DF827F827F827F827F827F827F827
%7DFD06FF7DF827F827217D527DFFFFF87D7E52F827F82727A8FFFF5227F8
%27F827F827F827277D52272752F82752FD06FF842027F827F827F827F827
%F827F8A8272027272720272727202727277DFD09FF7D5220A8FD05FFA8A8
%FFFF272027277DFD04FFFD04272027527EA8FFFF7D202727527DFD05FFA8
%5320272727202727272027272720277DF827F827F827F827F827F827F852
%52FD047DA8A8FFFFFF5227527D527D52A8FD04FF52A853277DFD04FF27F8
%27F8527DFD05FFF852A8FD05FFA87D2827F827F827F827F827F827F827F8
%27F8A8272727F8272727F8272727F8272727F8272727F8FD06277D7D7D27
%27F82752A9FD04FF2727A8FFFF7D2727F87DFD06FF52277DFFA8FF7E7D52
%272727F8272727F8272727F8272727F82727277DF827F827F827F827F827
%F827F827F827F8525227F827F8527D52A8FFFF52F8595252F87DFFFFFFA8
%F8275252F8272784FFFFA8A8597D5227F827F827F827F82752FFFFA8F827
%F827F827F827F827F827F827F8A827272720272727202727272027272720
%7EFFFFFF52277DFD06FF7D52FFFFFF272052A8FFFF7D2727202752FFFFFF
%7D2720272752527D5252FD0527FD04FF7D27272027272720272727202727
%27A8F827F827F827F827F827F827F827F827A8FFFFFF7D277DFD07FFA8FF
%FFFFF8527D527DFFFF7DF82752FFFF84F827277DA8FD07FFA8FF2727FD04
%FF5327F827F827F827F827F827F82721A827F8272727F8272727F8272727
%F82727FD04FF7DF87DFD0AFFA8A8FFFFA85252FF7D277DFFFF7D27277DFD
%0BFF7D27277DFFFFA827F8272727F8272727F8272727F827A8F827F827F8
%27F827F827F827F827F82728FFFFA8F827F85227A8FD0CFFA827F82759FF
%A852F87DAFFD0BFF5227F827F8525227F827F827F827F827F827F827F827
%27FF2720272727202727272027272720FD042752FD0627FD0EFFA82727FF
%7D2727A9FD0CFF5227202727272027272720272727202727272027272720
%52FF2727F827F827F827F827F827F827F827F827F827F827F827277DA8A8
%2EA8FD0AFF5227272752FD0BFFA87DF827F827F827F827F827F827F827F8
%27F827F827F827F82727FF7D2727F8272727F8272727F8272727F8272727
%F8272727F8272727F827AFFFFFFFA8FD06FF7E27277DFD0AFFA852272727
%F8272727F8272727F8272727F8272727F8272727F827277DFF7D27F827F8
%27F827F827F827F827F827F827F827F827F827F827F82721A8FFFF5227FD
%04FF7D52F852A8FD05FFA8FFA87E5252F827F827F827F827F827F827F827
%F827F827F827F827F827F827F8277DFFFF27272027272720272727202727
%2720272727202727272027272720272752272727A87D7D2727207EFFFFA8
%A852522E5227272027272720272727202727272027272720272727202727
%2720272727202727FFFFFF52F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F82752FFFFFF5227F852FD04A852
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%7DFFFFFFA8272727F8272727F8272727F8272727F8272727F8272727F827
%2727F8272727F827277DA8FFA87DF827272752A8FD05FFA852272727F827
%2727F8272727F8272727F8272727F8272727F8272727A8FD04FF5227F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F8277DFF
%FFFF5227F827F827F827F82752A8FFFFFFA8F827F827F827F827F827F827
%F827F827F827F827F827F827F82752FD06FF272720272727202727272027
%272720272727202727272027272720FD0427A8FF7DFD0427202727272027
%272720527DA82E2727272027272720272727202727272027272720272727
%202752FD07FFA82727F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F82727FD0AFF2727F82727
%27F8272727F8272727F8272727F8272727F8272727F8272727F8272727F8
%272727F8272727F8272727F8272727F8272727F8272727F8272727F82727
%27F8272727F82752FD0CFF5227F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F827F827F82752FD0EFF7E52272720
%272727202727272027272720272727202727272027272720272727202727
%272027272720272727202727272027272720272727202727272027272720
%272752A8FD11FFA85227F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F82752A8FD15FFA87D52272727F8272727F8272727F8
%272727F8272727F8272727F8272727F8272727F8272727F8272727F82727
%27F8272727F8272727F827275252A8FD1BFFA8A87D7D5252272821272727
%F827F827F827F827F827F827F827F827F827F827F827F82727525253527D
%7D7D537D7D7D537D7DA8A8FD2CFFA8FFA8A87D7D537D27272027272720FD
%04277D7DA8A8FD46FFA87D2727F827F852A8FD4EFF7E2727A8FD51FF7D7D
%FD29FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
*u
0 O
0 0 0 1 k
0 J 0 j 1 w 4 M []0 d1 XR
545.4473 740.873 m
532.2969 740.873 L
527.0732 755.8813 L
503.1543 755.8813 L
498.2217 740.873 L
485.4063 740.873 L
508.7119 806.9194 L
521.4873 806.9194 l
545.4473 740.873 L
f
1 D
523.2002 767 m
514.9531 791.5112 L
506.873 767 l
523.2002 767 L
f
0 D
299.6494 740.6631 m
299.6494 806.9194 L
312.5684 806.9194 L
312.5684 780.8491 L
337.8545 780.8491 L
337.8545 806.9194 L
350.7578 806.9194 L
350.7578 740.6631 L
337.8545 740.6631 L
337.8545 769.6333 L
312.5684 769.6333 L
312.5684 740.6631 l
299.6494 740.6631 L
f
239.2588 806.9414 m
264.2354 806.9414 l
269.1812 806.9414 272.8755 806.7251 275.3057 806.2759 c
277.7349 805.8423 279.9023 804.9277 281.8223 803.5332 c
283.7427 802.1396 285.3281 800.2964 286.6074 797.9736 c
287.8887 795.6655 288.5283 793.0635 288.5283 790.1973 c
288.5283 787.083 287.7427 784.2183 286.1719 781.6157 c
284.5859 779.0127 282.4473 777.0615 279.7563 775.7617 c
283.5537 774.5835 286.4922 772.5693 288.5283 769.7349 c
290.5791 766.8853 291.5977 763.5396 291.5977 759.6963 c
291.5977 756.6777 290.9434 753.7349 289.6187 750.8691 c
288.2959 748.0181 286.4922 745.7266 284.208 744.0225 c
281.9243 742.3184 279.1025 741.2646 275.7417 740.8623 c
273.6475 740.6299 268.5708 740.4751 260.5254 740.4131 C
239.2588 740.4131 l
239.2588 806.9414 L
f
1 D
251.8848 795.8672 m
251.8848 780.4858 L
260.1475 780.4858 l
265.0635 780.4858 268.1196 780.562 269.3125 780.7173 c
271.4644 780.9805 273.167 781.7705 274.4038 783.0869 c
275.6396 784.4043 276.2505 786.1387 276.2505 788.2915 c
276.2505 790.3521 275.7266 792.0254 274.6646 793.3105 c
273.5889 794.5962 272.0039 795.3711 269.9082 795.6348 c
268.6577 795.7891 265.0635 795.8672 259.1299 795.8672 c
251.8848 795.8672 L
f
251.8848 769.4102 m
251.8848 751.6274 L
263.5518 751.6274 l
268.105 751.6274 270.9854 751.7505 272.2061 752.0303 c
274.0835 752.3862 275.6104 753.2852 276.79 754.6792 c
277.9663 756.0889 278.5635 757.978 278.5635 760.333 c
278.5635 762.3311 278.0991 764.0195 277.1963 765.4141 c
276.2803 766.8076 274.9722 767.8311 273.2534 768.4653 c
271.5376 769.1011 267.7988 769.4102 262.0674 769.4102 c
251.8848 769.4102 L
f
0 D
108.5947 784.8345 m
104.2241 784.8345 99.8525 784.8345 95.481 784.8345 c
94.1118 789.3633 92.561 793.2466 88.8096 794.957 c
83.1548 797.5352 76.688 795.5137 73.396 792.8872 c
62.9595 784.5576 63.0313 750.6372 82.8276 751.4761 c
90.563 751.8027 93.4082 757.0571 95.481 763.8984 c
99.8525 763.8984 104.2241 763.8984 108.5947 763.8984 c
107.2368 752.752 101.4077 744.7783 92.4902 741.123 c
81.6357 736.6719 67.8613 740.2432 61.2031 747.7949 c
49.563 760.9951 50.6235 788.7485 62.3525 800.478 c
66.1841 804.3101 72.1484 807.4746 78.917 808.0708 c
96.5562 809.6226 106.9985 799.7915 108.5947 784.8345 C
f
134.1313 806.9194 m
139.0396 806.9194 143.9478 806.9194 148.855 806.9194 c
155.9385 784.6328 163.626 762.9497 170.7104 740.6631 c
166.0332 740.6631 161.355 740.6631 156.6768 740.6631 c
151.5059 757.4238 146.2148 774.0645 141.2632 791.0459 c
135.6465 774.5771 130.6826 757.4551 125.3896 740.6631 c
120.7876 740.6631 116.1865 740.6631 111.5859 740.6631 c
118.918 762.9316 126.3579 785.0933 134.1313 806.9194 C
f
176.2324 806.9194 m
180.5269 806.9194 184.8208 806.9194 189.1152 806.9194 c
189.1152 790.1255 189.1152 773.3315 189.1152 756.5371 c
197.1162 773.1514 204.7295 790.1563 212.5811 806.9194 c
217.873 806.9194 223.1641 806.9194 228.4551 806.9194 c
228.4551 784.8345 228.4551 762.7485 228.4551 740.6631 c
224.0845 740.6631 219.7129 740.6631 215.3423 740.6631 c
215.3423 756.9209 215.3423 773.1782 215.3423 789.4351 c
207.5869 774.2603 199.979 756.7349 192.1055 740.6631 c
186.7378 740.6631 181.3701 740.6631 176.002 740.6631 c
176.002 762.5181 176.002 784.374 176.002 806.2295 c
175.9824 806.5557 175.9639 806.8818 176.2324 806.9194 C
f
360.9697 806.9194 m
374.1113 806.9194 L
374.1113 756.7666 L
397.3184 806.9194 L
413.4229 806.9194 L
413.4229 740.6631 L
400.0801 740.6631 l
400.0801 756.8428 400.0801 773.0249 400.0801 789.2051 C
376.8438 740.6631 L
360.7393 740.6631 L
360.7393 806.2295 l
360.9697 806.9194 L
f
437.1182 806.9194 m
437.1182 751.7061 L
463.1152 751.7061 L
463.1152 806.9194 L
476.6885 806.9194 L
476.6885 751.7061 l
479.2188 751.7061 481.75 751.7061 484.2813 751.7061 c
484.2813 743.1167 484.2813 734.5283 484.2813 725.9395 c
481.29 725.9395 478.2988 725.9395 475.3086 725.9395 c
474.5176 732.2183 474.71 738.0508 469.7871 739.9727 c
467.0791 741.0298 462.9785 740.6631 458.7451 740.6631 C
424.0059 740.6631 L
424.0059 806.9194 l
437.1182 806.9194 L
f
*U
*u
1 D
339.3857 122.6533 m
339.3857 122.6533 l
336.125 122.8721 331.9307 122.6133 328.6143 123.1221 c
325.458 120.7363 321.8574 118.7959 318.7793 116.3311 c
328.874 113.2871 341.208 106.9814 352.0303 103.2178 c
357.6162 101.2754 364.4922 98.9395 368.1875 102.2813 c
370.791 104.6367 372.3525 109.0293 373.5732 112.8184 c
361.46 115.1133 352.6416 121.7646 339.3857 122.6533 C
F
401.4385 172.5303 m
401.4385 172.5303 l
394.3896 173.2432 387.3154 174.3975 379.4268 173.9346 c
365.2744 173.1035 353.2139 167.9873 342.4297 161.9922 c
311.6973 144.9092 288.5171 117.3193 252.0435 107.668 c
252.7686 105.3486 253.0713 102.6064 254.3853 100.877 c
257.042 100.0215 259.5449 99.0107 262.1128 98.0664 c
277.21 106.1357 293.3594 116.0674 310.3496 122.8877 c
316.2109 125.2402 322.9033 127.5938 329.5508 128.0391 c
335.2969 128.4238 340.6006 128.3184 345.708 128.9766 c
350.7578 129.626 355.5166 130.3877 360.2256 131.5518 c
378.0488 135.957 394.3594 143.542 406.8242 153.3291 c
412.5098 157.793 418.7266 163.5029 422.5127 169.4854 c
422.5557 169.5537 423.6348 170.4336 422.7471 170.6563 c
415.3535 171.46 408.4355 171.8213 401.4385 172.5303 C
f
149.0127 174.6377 m
149.0127 174.6377 l
143.479 165.8857 149.7485 154.127 158.3794 152.8604 c
169.1782 151.2754 175.7207 160.2891 174.7705 168.7832 c
173.9531 176.0889 167.1548 181.8613 159.0815 180.7256 c
154.1909 180.0371 150.7529 177.3896 149.0127 174.6377 C
f
430.4736 171.125 m
430.4736 171.125 l
430.5859 156.1338 451.0635 152.4092 457.1689 165.0371 c
462.1494 175.3408 453.3809 186.0527 443.3525 185.1748 c
435.1035 184.4521 430.4199 178.4189 430.4736 171.125 C
f
207.3188 187.9844 m
207.3188 187.9844 l
207.1636 184.7832 207.6299 180.96 207.0845 178.1494 c
203.668 179.5723 200.6064 181.3496 197.4839 183.0674 c
193.9531 181.0371 190.1016 180.6338 187.1812 177.4473 c
184.7388 174.7822 183.6675 167.6729 185.5415 163.6318 c
185.9727 162.7021 186.9351 161.709 187.6489 160.8223 c
188.2617 160.0605 189.5322 158.4648 190.2251 158.2461 c
193.6279 157.1699 198.417 159.2471 202.1675 158.0117 c
201.4023 153.7031 200.1221 149.9102 199.3574 145.6016 c
205.459 145.3809 206.0396 139.6396 213.4067 140.6836 c
214.8828 142.0176 215.8003 143.6025 217.856 144.4307 c
220.374 145.4443 223.6147 145.5273 227.2222 145.6016 c
226.3867 143.4824 226.2559 141.8613 225.1147 139.9814 c
224.1367 138.3691 222.1201 137.5313 222.0708 135.5322 c
222.0083 132.9902 224.3511 131.9258 226.2856 130.8496 c
228.311 129.7217 230.3877 128.3623 232.3745 128.0391 c
235.667 127.5039 239.2856 127.8271 241.272 128.7422 c
243.8359 129.9219 245.1489 133.0645 247.3604 134.8301 c
249.5146 136.5488 251.4155 137.5889 254.3853 137.874 c
254.4551 135.3867 252.4023 133.0342 252.0435 130.8496 c
251.8164 129.4658 251.6226 127.5098 252.2778 126.166 c
254.1045 122.4219 262.4419 124.9063 266.3271 125.9316 c
274.7012 128.1426 282.373 131.3184 289.5093 134.1279 c
291.0884 134.749 292.8687 134.9131 293.9585 136.001 c
292.1558 148.0723 284.6372 157.8916 276.6309 165.0371 c
274.6348 166.8174 270.1621 171.0137 266.5615 170.6563 c
264.0981 170.4121 262.5181 166.8711 260.0049 165.2705 c
258.103 164.0596 256.5063 163.3008 254.1509 163.1641 c
253.1909 168.9795 256.1035 176.376 252.5117 179.3203 c
248.7197 182.4297 240.8467 179.4199 234.4814 180.4912 c
234.4814 177.2129 234.4814 173.9346 234.4814 170.6563 c
232.7646 170.6563 231.0469 170.6563 229.3301 170.6563 c
227.7339 176.5537 225.7856 182.0986 224.1782 187.9844 c
218.5586 187.9844 212.9385 187.9844 207.3188 187.9844 C
f
385.749 205.3125 m
385.749 205.3125 l
365.8027 202.8301 351.0137 195.7441 336.3418 184.4717 c
326.7305 177.0889 316.1357 169.625 307.0713 161.0557 c
304.4766 158.6025 299.4072 153.8057 299.3447 150.9873 c
299.2939 148.7627 300.9482 147.6631 301.9199 145.6016 c
315.6768 150.2715 323.707 159.9756 334.4678 167.6123 c
344.0635 174.4229 354.0244 179.6152 368.8896 180.7256 c
370.9541 180.8799 373.3975 180.5889 375.4463 181.1943 c
379.0127 182.2471 381.9854 187.8516 383.6416 191.4971 c
385.7578 196.1514 387.4082 201.1006 388.3252 205.5469 c
387.4189 205.7266 386.2002 205.3682 385.749 205.3125 C
f
298.4072 207.8877 m
298.4072 207.8877 l
294.8438 205.6797 291.8149 201.6602 291.8511 195.7119 c
291.8799 190.998 294.9434 185.3672 299.8125 183.0674 c
309.3604 178.5566 319.9697 185.8652 319.9502 195.9463 c
319.9443 199.1123 317.9092 203.7188 316.2041 205.5469 c
313.8184 208.1045 308.9395 210.3945 304.2607 209.7617 c
301.6973 209.4141 299.8926 208.8086 298.4072 207.8877 C
f
227.2222 213.2734 m
227.2222 213.2734 l
227.0737 209.9883 227.5249 206.1025 226.9883 203.2051 c
222.2285 204.792 214.8906 207.4473 210.5972 203.9072 c
207.8525 201.6445 207.834 197.9766 207.3188 193.3701 c
214.6572 193.0859 221.4956 193.749 228.1587 193.3701 c
242.8672 192.5332 254.0664 186.4297 263.7515 179.7891 c
273.6069 173.0322 282.0757 164.7021 291.8511 158.4805 c
294.2363 159.2949 296.7856 159.9453 299.1104 160.8223 c
299.1104 164.1006 299.1104 167.3779 299.1104 170.6563 c
291.2505 172.7695 288.0972 180.1787 284.8262 186.8135 c
283.0869 190.3418 280.6104 195.1875 277.5674 195.7119 c
272.687 196.5527 270.0732 192.9775 267.9663 191.0283 c
266.7993 189.9492 265.624 188.6533 264.2202 188.4521 c
265.04 192.5781 267.9644 196.3691 266.3271 200.3945 c
265.4409 202.5752 262.1729 204.6406 259.5366 205.7813 c
256.5117 207.0889 252.6538 207.8115 249.4683 208.1221 c
249.2808 205.3887 249.3438 203.6299 249.4683 200.8633 c
247.3252 200.5068 245.4819 198.6074 244.0825 198.2881 c
242.4834 203.2451 240.9238 208.2422 239.3989 213.2734 c
235.3398 213.2734 231.2813 213.2734 227.2222 213.2734 C
f
392.3057 226.1533 m
392.3057 226.1533 l
389.4082 220.0752 391.3877 213.4063 395.1162 209.7617 c
403.0205 202.0352 419.0264 206.6416 419 220.0645 c
418.9844 228.5566 411.7646 234.9473 403.3115 233.8799 c
397.3506 233.127 393.6416 228.9531 392.3057 226.1533 C
f
188.5854 224.748 m
188.5854 224.748 l
187.6865 215.6885 194.7095 209.0078 202.6357 209.0596 c
210.7476 209.1113 217.541 216.3945 216.4512 225.2158 c
215.5205 232.7471 208.5112 238.0342 200.9966 237.1582 c
194.208 236.3672 189.2349 231.2852 188.5854 224.748 C
f
502.127 268.3018 m
502.127 268.3018 l
486.2275 263.3203 472.7754 255.5166 460.4473 246.9932 c
456.3438 244.1563 452.0059 241.1426 448.7383 237.627 c
446.8486 235.5928 445.4521 232.9961 443.8213 230.6016 c
432.1875 213.5146 423.084 194.7773 393.7109 195.7119 c
392.9043 191.6006 392.0029 187.585 391.3691 183.3008 c
422.6689 183.4258 448.0098 191.7666 467.2373 205.5469 c
485.8535 218.8877 500.5107 239.5869 502.8301 268.3018 c
502.7334 268.7002 502.5283 268.252 502.127 268.3018 C
f
111.7808 272.9854 m
111.7808 272.9854 l
106.1372 270.0361 100.8315 267.1904 100.3071 259.8721 c
100.1582 257.7861 100.1895 256.0068 101.0098 253.5498 c
102.4014 252.7559 104.0762 252.2441 105.2241 251.208 c
104.5776 248.874 102.0513 247.8242 101.0098 245.5879 c
99.8389 243.0762 100.5039 240.1787 100.3071 236.2217 c
105.0933 232.8115 110.8516 230.375 119.7427 231.0703 c
120.063 229.5166 121.9849 229.5664 122.5527 228.2598 c
121.3848 226.8516 120.7305 224.9307 119.7427 223.3428 c
117.1177 223.5684 115.4097 223.4365 112.7173 223.3428 c
113.6709 217.9404 114.9268 212.6631 118.3379 209.9961 c
124.0356 205.54 132.9678 211.2461 140.1147 210.9326 c
138.7866 208.6211 136.918 207.0605 134.9629 204.8447 c
133.7119 203.4258 130.3706 200.085 130.2798 198.0537 c
130.041 192.7021 138.8164 193.3311 144.0952 192.9023 c
161.7031 191.4707 180.8599 189.5977 197.0156 188.4521 c
197.0156 191.7314 197.0156 195.0098 197.0156 198.2881 c
178.3867 199.5615 173.3765 214.4561 169.853 230.8359 c
168.2139 230.8359 166.5747 230.8359 164.936 230.8359 c
163.7114 228.5059 164.7217 224.9668 162.3599 223.8115 c
160.4897 222.8965 157.4375 223.7246 154.8667 223.5771 c
155.5703 225.6406 155.6274 227.1973 156.7402 228.9629 c
157.4897 230.1523 159.0557 230.8047 159.5498 232.2412 c
159.8975 233.25 159.9614 235.5947 159.7837 236.9238 c
159.3433 240.2275 156.2495 244.3291 153.9302 246.29 c
152.7217 247.3125 150.7422 248.5166 149.481 248.3984 c
147.2095 248.1836 145.9941 245.2061 144.7979 243.4805 c
143.2798 241.291 141.9565 239.6084 139.8804 238.5635 c
139.5142 240.1426 137.1724 241.8994 137.3047 244.1836 c
137.458 246.8271 141.3701 247.3223 142.2222 249.5684 c
142.6875 250.7949 142.4351 252.8574 142.2222 254.4863 c
141.5376 259.7197 139.4019 262.3574 137.5386 265.96 c
133.2212 265.7793 129.6143 266.3086 125.3628 266.1943 c
124.6152 268.8027 123.4951 271.0391 122.5527 273.4531 c
118.8555 273.0605 114.083 274.1875 111.7808 272.9854 C
f
78.2964 291.4834 m
78.2964 291.4834 l
74.895 289.6338 70.9409 285.5742 71.0376 278.8389 c
71.1548 270.5918 77.8262 265.1367 84.8525 265.0234 c
91.8198 264.9102 99.2383 270.4531 99.1362 279.3076 c
99.0845 283.8564 95.9951 288.3564 94.2192 289.8447 c
91.877 291.8066 87.5581 293.5 83.2134 292.8887 c
81.0044 292.5781 79.6177 292.2021 78.2964 291.4834 C
f
117.6353 281.415 m
117.6353 281.415 l
132.3965 277.0049 142.6343 267.5537 152.7598 256.3594 c
160.7754 247.4971 167.9912 236.5664 175.9409 227.0898 c
176.9048 225.9404 178.7871 223.5859 180.1558 223.5771 c
181.8579 223.5664 183.7178 226.0938 184.605 227.792 c
185.5234 229.5479 186.9009 232.2559 187.1812 233.8799 c
187.4937 235.6934 187.2124 238.1357 187.1812 240.2021 c
187.0923 245.999 186.0352 250.0703 184.605 253.5498 c
179.688 253.5498 174.7705 253.5498 169.853 253.5498 c
170.27 255.1533 171.5381 256.0762 171.9604 257.7646 c
172.54 260.0781 172.7378 270.1289 171.7261 272.751 c
171.3867 273.6309 167.5801 278.5742 167.0435 278.6045 c
167.1436 278.5986 164.7891 276.9609 164.2329 276.498 c
163.0332 275.4971 162.731 274.5771 161.4233 274.1553 c
159.1465 273.4209 157.4771 273.9453 154.8667 273.6875 c
156.2666 278.3535 158.2104 285.8574 157.2085 291.7178 c
157.0405 292.6982 156.4585 294.1064 155.8032 294.7617 c
154.3452 296.2207 149.0537 296.9316 146.2026 295.9326 c
144.9409 295.4902 144.0024 293.9355 142.6899 293.123 c
141.0005 292.0752 139.5054 291.5615 137.3047 291.25 c
137.3047 293.7471 137.3047 296.2441 137.3047 298.7432 c
133.0986 300.2344 129.1099 301.9434 122.7866 301.3184 c
119.2764 296.4775 117.3511 290.0508 117.6353 281.415 C
f
498.6152 296.167 m
498.6152 296.167 l
493.541 286.3428 500.9258 275.3262 511.0254 275.3262 c
518.6885 275.3262 525.1357 281.4121 525.0752 289.6104 c
525.0107 298.2539 517.8545 304.1338 509.8545 303.4258 c
503.793 302.8887 500.0498 298.9443 498.6152 296.167 C
f
467.7061 303.6602 m
467.7061 303.6602 l
456.4766 296.7227 448.0361 286.2471 441.2451 272.5166 c
435.8271 261.5586 430.9629 249.7588 425.791 238.3291 c
424.8887 236.334 423.7686 234.4854 423.6826 233.1777 c
423.5635 231.333 424.4863 229.1797 424.8545 227.3232 c
425.2754 225.1992 425.4697 223.2236 426.0244 221.4697 c
435.2217 227.5918 441.6914 237.1563 449.4414 245.3535 c
456.291 252.5996 463.8232 259.2246 472.3887 264.3203 c
473.5537 265.0137 475.0625 265.6592 475.9014 266.8965 c
473.0547 278.958 470.9316 291.7432 467.9395 303.6602 c
467.8623 303.6602 467.7842 303.6602 467.7061 303.6602 C
f
126.7681 315.6025 m
126.7681 315.6025 l
127.9331 313.3457 130.4766 310.748 133.0898 309.5137 c
143.7173 304.4932 153.2441 313.4297 153.228 322.3926 c
153.2124 330.5781 146.2402 336.9375 138.0073 336.208 c
128.8071 335.3936 121.6475 325.5156 126.7681 315.6025 C
f
456.7002 339.7207 m
456.7002 339.7207 l
453.2139 337.8242 449.168 333.6494 449.4414 326.6074 c
449.6875 320.2568 455.043 314.123 460.915 313.2607 c
468.9199 312.0859 476.335 317.8281 477.3057 324.7344 c
478.7754 335.1738 470.5518 342.3828 461.6172 341.125 c
459.417 340.8164 458.0186 340.4375 456.7002 339.7207 C
f
494.8682 350.9609 m
494.8682 350.9609 l
491.2871 344.4531 488.3643 337.1035 485.7354 329.6523 c
483.0449 322.0205 481.002 313.3887 480.8184 304.1279 c
480.6338 294.748 480.9551 284.6338 480.8184 273.4531 c
485.0557 274.2119 488.7451 275.5176 492.9951 276.2627 c
493.042 280.5674 491.252 283.168 490.6533 286.332 c
489.1445 294.3037 491.8311 300.2715 496.5078 303.4258 c
501.6475 306.8916 508.9014 306.7178 517.3477 306.7041 c
518.0186 317.2773 520.1201 330.0654 520.3916 341.3604 c
520.4922 345.5195 521.1074 350.3975 520.3916 354.0039 c
520.2021 354.9629 519.291 356.3369 518.7529 357.5176 c
515.7822 364.0322 513.541 370.5576 505.6396 371.5664 c
503.1924 364.2197 498.6982 357.9199 494.8682 350.9609 C
f
114.8257 376.0156 m
114.8257 376.0156 l
112.916 376.9043 102.4297 376.9014 99.8389 376.4844 c
93.4502 375.4551 96.0991 367.9336 95.1558 361.7324 c
91.3584 361.0352 87.4771 362.1221 85.0869 360.5605 c
81.1055 357.9609 83.7588 350.8066 83.4478 345.3408 c
85.3838 342.9063 88.3154 341.4658 90.2383 339.0186 c
86.9604 339.0186 83.6821 339.0186 80.4038 339.0186 c
80.4038 333.2422 80.4038 327.4658 80.4038 321.6904 c
84.4629 321.5342 89.145 322.002 92.814 321.4561 c
91.71 318.9521 92.5293 315.7451 90.4722 314.4316 c
88.6138 313.2441 85.7612 314.5469 82.979 313.7285 c
83.2236 310.2695 82.5361 305.4004 84.3843 303.1914 c
86.4946 300.6689 90.9507 302.0791 94.4536 300.8496 c
95.8091 300.374 97.0688 298.6729 98.4341 297.3379 c
101.707 294.1338 105.2681 291.0059 108.269 288.2051 c
108.8511 287.6621 109.8003 286.3682 110.1421 287.0342 c
112.3242 296.248 115.6709 304.2969 124.894 306.4697 c
124.1826 308.3359 123.4048 309.9268 122.5527 311.6221 c
121.7842 313.1504 120.3413 314.7393 119.9771 316.7734 c
119.4468 319.7295 119.5522 330.9258 120.6792 333.3984 c
121.7236 335.6895 124.6211 336.8105 125.8306 338.3154 c
127.8789 340.8643 128.0869 351.6113 127.4702 356.3457 c
126.7939 361.5352 122.7397 361.2051 117.4009 361.7324 c
116.9888 368.332 118.7764 374.1768 114.8257 376.0156 C
f
327.4434 413.2471 m
327.4434 413.2471 l
329.2559 416.0986 331.6738 420.3906 330.4873 424.4868 c
329.6504 427.3779 324.8721 430.7705 321.5898 432.9165 c
313.9141 437.9355 305.6348 440.4448 295.1289 441.5806 c
283.1616 442.875 272.8198 441.731 262.8149 439.9414 c
257.9941 439.0791 253.417 437.7412 249.2339 436.8975 c
247.186 436.4849 244.2148 436.3228 243.145 435.0244 c
241.6914 433.2578 241.9673 429.4727 241.7407 426.3604 c
241.4863 422.8696 240.9224 419.252 241.0381 416.7598 c
241.1719 413.8809 242.1875 410.6924 242.6772 407.627 c
244.2046 398.0605 245.4316 388.1465 247.1265 379.2939 c
244.5864 375.0732 241.8325 370.8027 238.228 367.5859 c
234.7344 364.4678 230.147 361.5127 223.4761 361.7324 c
219.0542 364.8594 216.6953 369.5635 214.3433 374.6113 c
212.4941 378.5801 210.9819 382.209 209.8945 386.5527 c
209.5259 388.0264 209.5146 389.8242 208.958 391.2363 c
208.4819 392.4443 205.2813 396.3223 204.2749 396.6221 c
202.4502 397.165 200.3311 396.5752 198.6548 396.6221 c
197.0303 396.667 194.8613 396.46 193.269 397.0898 c
191.9111 397.6279 191.2363 399.1914 189.9907 399.9004 c
188.6821 400.6445 187.519 400.8916 185.5415 401.3047 c
184.1846 399.2617 183.6626 397.2813 182.7319 395.2168 c
181.8569 393.2764 180.2852 391.3418 179.9219 389.1289 c
179.3662 385.7432 179.5435 381.6279 180.8584 379.2939 c
182.0625 377.1563 184.8018 376.3574 186.9468 374.8447 c
188.9844 373.4092 191.4951 371.8711 192.3325 369.6934 c
192.8711 368.2939 192.8677 366.7314 193.269 365.4785 c
193.7212 364.0703 194.5479 363.0146 194.4399 361.7324 c
190.7803 362.6846 187.8291 363.958 184.605 365.4785 c
180.7588 367.293 176.4385 370.4785 171.7261 368.5225 c
167.3682 366.7129 161.4272 359.1875 160.2524 353.5361 c
159.1851 348.4014 161.9272 343.7441 165.8726 342.2969 c
167.7075 341.624 172.6738 341.1758 175.707 342.0625 c
177.061 342.458 177.481 343.498 179.2192 343.9355 c
182.3701 344.7295 185.481 343.626 189.2886 344.4043 c
189.6504 343.2275 190.9868 342.3096 192.3325 341.5938 c
190.2192 338.873 187.6475 337.0068 184.605 334.5693 c
182.3877 332.792 177.9189 329.9063 177.3462 327.0762 c
177.1074 325.8955 177.4287 324.2881 177.5801 323.0957 c
178.1543 318.5859 180.2476 316.7461 181.3271 313.0264 c
182.0933 310.3867 182.2559 307.6797 182.2637 304.1279 c
188.8105 304.5625 195.4429 302.9814 199.1235 305.7676 c
202.3423 308.2041 202.1094 313.0605 204.2749 316.5391 c
206.3896 319.9365 209.4238 320.7607 214.1094 321.4561 c
215.916 316.5488 217.8184 311.7402 219.4956 306.7041 c
223.2041 305.7979 227.8198 302.6152 232.3745 304.8311 c
233.6372 306.5 233.4048 308.4521 234.4814 309.9824 c
236.1899 312.4092 239.3535 313.1309 242.4429 314.1973 c
241.4399 318.9707 240.5112 323.8174 239.6328 328.7148 c
243.0308 331.3271 245.9756 334.3936 249.7021 336.6768 c
255.7969 332.9365 262.0884 329.3936 271.7134 329.1836 c
271.0972 335.2803 269.9873 340.8818 269.1372 346.7451 c
275.8574 343.4746 280.1318 337.7578 291.6167 339.252 c
291.6558 342.8818 290.1401 345.3359 289.2749 348.6191 c
288.5337 351.4336 289.0132 355.918 289.5093 358.9219 c
289.9331 361.4902 291.6284 364.6758 291.6167 366.8838 c
291.6118 367.7822 291.0229 369.7773 290.6802 371.0986 c
289.2393 376.6563 285.6021 376.6992 281.5479 379.5283 c
281.6987 383.6699 281.2427 388.4199 281.7817 392.1729 c
286.3613 392.1533 290.7163 394.1875 295.5977 394.5146 c
301.4355 394.9053 307.415 394.2246 313.8623 394.5146 c
317.71 400.9258 323.3994 406.8887 327.4434 413.2471 C
f
378.7246 569.4326 m
378.7246 569.4326 l
373.4355 564.6479 367.5557 561.0791 361.3965 557.7241 c
359.3262 556.5967 356.9619 555.7393 354.8398 554.4463 c
352.7012 553.1421 350.6689 551.3071 348.5176 549.7632 c
341.9971 545.084 335.1592 540.5234 329.082 535.7134 c
321.4092 529.6387 313.4082 522.7256 308.7109 514.1704 c
308.5557 513.8892 307.416 513.21 308.2422 512.7661 c
318.0576 512.7661 327.124 512.7661 336.5752 512.7661 c
339.7031 512.7661 343.3945 512.1616 346.1768 512.7661 c
347.1807 512.9839 349.3604 514.5488 351.0938 515.8101 c
362.2002 523.8896 370.4365 534.627 378.0225 545.314 c
387.6475 558.8755 395.7881 572.6592 398.3945 589.8042 c
398.3809 589.9473 398.3594 590.082 398.1602 590.0386 c
391.1113 583.5908 385.6357 575.6836 378.7246 569.4326 C
f
372.4023 595.6587 m
372.4023 595.6587 l
362.4248 585.8804 350.2998 578.7266 335.1709 573.6475 c
328.0283 571.2495 321.042 568.3018 314.0957 565.2178 c
293.5415 556.0908 275.2036 544.3413 264.688 525.4102 c
268.624 520.5454 275.7314 516.314 283.8896 514.873 c
286.7002 514.377 290.2949 513.6377 293.022 514.4048 c
294.915 514.937 298.1406 517.8955 300.5146 519.7905 c
307.9199 525.7007 315.2012 531.624 322.0576 537.1187 c
331.8369 544.9551 340.7305 552.8477 350.8594 560.0659 c
355.8252 563.6045 361.2158 566.2075 366.5479 570.1353 c
380.1816 580.1758 390.5557 593.3916 398.8623 609.0054 c
399.6895 610.5596 400.7539 612.248 400.9697 613.4546 c
401.7803 617.9673 400.5293 624.293 400.7354 627.7388 c
391.3857 616.1475 382.5723 605.6255 372.4023 595.6587 C
f
490.6533 542.0356 m
490.6533 542.0356 l
489.8105 544.0645 488.3418 545.9883 487.8438 548.124 c
486.9512 551.957 487.2783 556.6123 487.6094 560.5347 c
487.9541 564.6079 488.7627 568.2959 489.7168 571.54 c
491.7598 578.4863 494.8438 584.8008 495.3369 592.146 c
496.3857 607.7871 491.6299 620.6753 483.8623 628.4409 c
477.6582 634.646 467.1367 639.9766 454.124 639.2124 c
433.6045 638.0068 419.2012 625.8657 411.9756 612.2837 c
410.0732 608.708 408.2598 604.3882 407.292 599.8735 c
406.2559 595.0396 405.5459 589.4009 406.3555 584.1846 c
407.0684 579.5918 408.835 575.3726 410.5703 571.3062 c
418.7539 552.1333 430.5566 535.0708 440.7773 516.2778 c
444.585 509.2764 448.6484 501.6812 452.0166 493.3306 c
455.2236 485.3828 458.793 475.4893 458.1055 465.231 c
457.5684 457.2256 454.625 452.2109 450.6123 448.3716 c
440.5254 438.7202 421.1621 436.7773 400.9697 436.8975 c
388.6924 444.7241 380.0215 456.3154 371.7002 468.041 c
364.4727 478.2236 357.0859 489.1509 351.0938 500.1206 c
350.208 501.7422 349.7129 503.6992 348.2832 505.0381 c
334.6279 504.9834 320.6094 505.2148 307.5391 504.8042 c
293.8228 504.3735 281.3809 505.7578 270.5425 509.019 c
249.4756 515.3579 234.2134 528.25 216.9194 537.5864 c
204.4697 529.394 195.1357 522.5752 179.9219 517.6831 c
172.8818 515.4194 163.0391 513.7031 155.5698 516.2778 c
152.0542 517.4897 149.3618 519.5938 146.9053 521.8979 c
143.1069 525.4604 135.8398 533.106 127.938 529.1572 c
125.0806 527.729 124.229 523.7388 120.9136 521.8979 c
118.627 520.6284 116.1094 520.3613 112.7173 520.0249 c
112.5068 511.082 111.9556 504.7202 117.6353 501.5259 c
122.0566 499.0396 130.167 500.314 137.0708 500.355 c
137.731 500.0439 137.1377 498.9854 138.2412 498.7163 c
138.7896 498.1719 139.8037 498.0928 140.1147 497.311 c
135.0776 491.2363 126.2056 489.0283 120.2109 483.4956 c
118.9868 482.3662 115.4111 478.5142 115.2935 476.939 c
115.2417 476.2402 115.8643 474.606 116.23 473.4263 c
116.5776 472.3057 117.189 471.1011 117.4009 469.9146 c
118.146 465.7397 117.1699 461.7021 118.8062 459.3774 c
120.6553 456.7485 131.3599 456.8545 134.9629 458.2056 c
138.3105 459.4619 138.5469 464.0083 140.8169 467.3384 c
143.2363 470.8857 147.2979 471.8062 152.5249 472.4897 c
152.1592 470.9312 150.6167 470.002 150.1836 468.041 c
149.6533 465.6436 149.9497 462.2505 149.9497 459.1426 c
149.9497 455.9702 149.9497 452.665 149.9497 449.7764 c
151.8623 447.9893 156.3496 448.2197 157.9106 446.498 c
159.4517 444.7998 158.7832 442.1416 160.0186 439.7075 c
166.4653 439.6177 171.2563 439.4194 174.3022 442.2837 c
180.5571 448.165 178.4136 461.543 179.688 472.4897 c
186.0083 467.9609 190.8154 461.9189 202.1675 462.4209 c
202.1396 464.7129 202.7065 466.4092 202.8696 468.5093 c
205.6172 471.9287 209.4463 474.2656 212.0015 477.8755 c
210.3438 481.1348 208.3716 484.0796 207.0845 487.7104 c
216.5332 492.1406 226.29 496.627 235.6528 500.8232 c
236.9531 501.4063 238.1758 502.4697 239.6328 502.4624 c
239.6328 494.189 239.6328 485.915 239.6328 477.6416 c
249.2271 477.9604 252.4219 484.6777 259.5366 487.4761 c
257.3462 482.1733 256.5283 475.499 256.9614 467.5728 c
259.6201 467.8228 261.7705 467.4316 263.5171 468.041 c
265.9629 468.8945 267.0176 471.7583 269.3716 472.4897 c
273.6377 466.7466 279.2822 463.8052 285.2944 460.7817 c
290.0298 458.4009 294.9561 456.3345 300.5146 455.396 c
302.457 455.0684 304.6787 455.2134 307.0713 454.9282 c
311.7842 454.3657 316.291 452.1509 319.9502 450.0107 c
327.8867 445.3691 332.8848 439.8335 336.8096 431.2778 c
338.7441 427.061 340.5869 422.2402 340.0879 416.5254 c
339.3672 408.2617 334.0068 403.1855 328.6143 397.793 c
323.4629 392.6416 317.1953 387.6553 316.4375 379.5283 c
315.8691 373.4248 318.5049 366.7529 320.8867 363.8389 c
325.7041 357.9482 335.7266 353.9209 343.6006 350.2578 c
347.2363 348.5664 351.5371 346.4785 355.7773 344.1699 c
359.5879 342.0938 364.5576 339.3975 365.6113 335.7402 c
366.5049 332.6406 365.8545 327.4922 365.377 323.7979 c
364.1396 314.208 361.1855 307.501 350.1563 308.5771 c
342.1357 309.3604 333.5186 313.7354 326.2725 313.9639 c
325.3086 316.4551 325.2588 318.6172 323.2285 320.0518 c
318.5068 323.3887 308.7559 320.5225 304.2607 318.8799 c
302.9111 314.4609 301.3408 312.0313 298.4072 309.2793 c
296.9961 307.957 294.4727 306.0781 294.1924 304.3623 c
293.9409 302.8213 294.6538 300.6045 295.1289 299.2109 c
296.4604 295.3076 299.7832 290.1133 303.793 289.1426 c
305.4238 288.7461 308.001 289.1367 310.1152 289.376 c
316.4863 290.0986 323.2559 290.96 329.082 291.4834 c
327.1982 286.3887 324.1807 281.9063 318.3115 281.1807 c
313.6963 280.6104 309.7178 282 305.666 280.4775 c
301.5732 278.9404 297.439 274.6113 296.7686 270.1748 c
295.9165 264.54 297.3896 258.4697 296.7686 251.4424 c
299.8721 249.6279 303.3027 248.1416 306.3691 246.29 c
316.2393 244.8506 319.4375 250.0811 323.9307 254.0176 c
324.0791 257.0703 323.6309 260.7188 324.165 263.3838 c
329.2227 264.0254 334.4248 265.7686 338.917 266.1943 c
338.917 262.8789 338.917 259.6895 338.917 256.5938 c
338.917 253.4648 338.4404 250.0146 339.3857 247.4609 c
339.9453 245.9482 341.8867 245.2422 342.6641 243.4805 c
343.7666 240.9805 343.3984 238.9922 344.0684 236.2217 c
349.3574 236.1953 355.0635 235.9561 358.5869 237.1582 c
360.418 237.7832 365.6084 240.2695 366.0801 241.6074 c
366.7734 243.5771 366.0801 246.8623 366.0801 249.5684 c
366.0801 252.2109 365.8828 254.8008 366.3135 257.2959 c
365.9688 258.5117 364.8096 258.9141 364.6748 260.3408 c
366.0977 262.7188 367.5508 265.082 369.124 267.3652 c
370.6719 269.6094 372.1924 271.9463 374.041 273.9219 c
375.1973 273.5947 376.7793 273.6934 378.2559 273.6875 c
379.2256 271.3008 380.3203 269.0391 381.0664 266.4287 c
386.7715 266.2646 391.9131 266.665 397.458 266.6621 c
398.6045 270.4736 400.4951 275.2627 401.9063 279.3076 c
402.416 280.7676 403.3945 282.79 403.3115 283.7559 c
403.2188 284.8291 401.8584 286.0332 401.2041 287.0342 c
400.2744 288.458 399.9375 289.1514 398.6279 289.8447 c
396.3564 291.0479 393.4014 290.9941 390.4326 291.4834 c
394.0674 298.9316 397.5781 306.5059 401.4385 313.7285 c
406.3408 315.3047 410.7188 317.4053 415.7217 318.8799 c
412.5762 324.7549 405.001 327.3291 406.1211 336.6768 c
410.9512 335.1514 417.2578 333.4014 423.4492 334.335 c
425.9971 334.7197 428.4336 336.3359 430.708 336.6768 c
430.0068 342.5146 425.0762 345.0723 422.7471 349.5557 c
420.8184 353.2686 420.6992 357.7109 420.873 364.0732 c
415.915 368.0361 410.9316 372.6406 402.8428 373.6738 c
400.1367 374.0205 396.0879 373.5244 393.4766 374.377 c
386.0127 376.8125 387.7549 390.7666 388.3252 399.666 c
388.4863 402.1768 388.4854 405.4502 389.2617 406.9248 c
390.7256 409.7041 395.1143 409.7344 399.3311 409.7354 c
408.6289 409.7354 418.5391 409.6953 426.4932 410.9053 c
448.125 414.1963 463.8135 425.5347 469.5791 444.6245 c
472.5469 454.4507 472.1553 467.0811 469.5791 478.3442 c
467.3066 488.2773 463.4336 497.5718 459.5098 506.6772 c
451.626 524.9736 442.6641 540.6704 435.1572 559.1294 c
431.3779 568.4233 427.3652 578.2798 427.4297 590.0386 c
427.5059 603.7422 435.208 611.6973 444.7578 616.4985 c
448.0977 618.1782 452.0049 620.3921 455.2959 620.7139 c
461.9854 621.3682 468.3467 616.7495 471.6865 612.7524 c
475.8096 607.8184 478.3135 601.9824 478.7109 595.4243 c
479.1787 587.7085 476.3408 581.0293 470.5156 577.6279 c
465.2266 574.54 458.3027 575.3677 448.5049 575.2866 c
448.3301 566.0508 452.1953 557.7051 453.1875 549.5288 c
453.3545 548.1602 453.124 546.6357 453.4219 545.314 c
453.9268 543.0791 455.6885 540.3408 456.9346 537.8208 c
460.0605 531.5 465.125 526.1113 475.1992 527.752 c
476.6523 527.9893 478.1279 528.9736 479.6475 529.6255 c
484.2744 531.6089 488.7695 533.2549 492.9951 535.479 c
492.0488 537.6587 491.5781 539.8096 490.6533 542.0356 C
f
247.3604 635.6997 m
247.3604 635.6997 l
242.9814 626.9497 243.8208 615.9419 250.4048 610.645 c
251.3794 609.8604 253.4575 608.5854 255.3218 608.3032 c
258.0591 607.8892 264.3115 607.8105 266.7954 608.3032 c
268.2163 608.585 270.4258 609.9966 272.1816 610.8784 c
276.6426 613.1221 279.8672 615.6226 281.5479 620.0112 c
275.5991 620.854 270.0059 622.0508 264.2202 623.0557 c
261.5576 634.521 257.3384 644.4292 244.3159 645.5347 c
245.3125 642.2378 246.3643 638.9966 247.3604 635.6997 C
f
238.228 538.0552 m
238.228 538.0552 l
239.7749 537.2104 241.8901 535.9609 244.3159 535.0107 c
246.2886 534.2388 249.8809 532.7065 251.5752 532.9038 c
252.5171 533.0132 254.7949 534.8779 256.4927 536.1821 c
261.3652 539.9253 266.2202 543.7588 270.7769 546.9526 c
290.5527 560.8164 310.8574 573.9297 335.873 581.8433 c
352.417 587.0762 366.5693 596.3823 377.3193 607.1323 c
388.5967 618.4097 397.7109 632.5723 398.3945 652.7939 c
398.3809 652.9365 398.3594 653.0713 398.1602 653.0278 c
378.1201 637.8154 366.375 614.6646 341.4932 604.7905 c
333.4834 601.6123 324.3516 599.5693 314.5645 597.0635 c
305.6045 594.769 296.5195 592.0542 287.6357 589.3364 c
278.8125 586.6362 270.1294 583.6577 262.3467 579.9697 c
246.4927 572.457 235.1104 561.0718 227.2222 545.5483 c
229.957 542.8428 233.7783 540.4854 238.228 538.0552 C
f
189.7573 672.229 m
189.7573 672.229 l
189.4722 670.7285 190.2212 668.7837 190.4595 666.8433 c
191.1826 660.9463 191.792 656.0693 192.0981 650.686 c
186.8613 651.5391 183.3398 654.4482 179.9219 658.4136 c
177.6421 661.0591 174.1143 668.1006 170.3218 668.7163 c
168.5483 669.0049 166.1494 668.2764 163.9985 668.0142 c
157.4375 667.2148 151.498 666.5127 145.0317 665.9067 c
145.0317 659.2725 145.0317 652.6377 145.0317 646.0029 c
150.313 643.0098 156.2656 640.6895 164.7017 640.8521 c
167.1821 636.3853 170.0264 632.2827 172.1948 627.5044 c
166.4268 628.5273 160.6152 629.5063 154.8667 630.5483 c
153.1074 628.6396 150.1099 628.5078 148.7788 626.0991 c
147.5601 623.894 148.2856 620.9844 147.3735 617.9038 c
144.3418 617.3745 141.2446 617.3325 140.3486 615.0938 c
139.6753 613.4106 140.501 610.2002 141.0513 609.0054 c
142.7852 605.2451 148.5781 599.0859 153.228 598.2339 c
161.1128 596.7905 162.6226 603.8003 167.7456 606.1958 c
172.4702 604.208 177.6475 602.6724 182.2637 600.5757 c
180.8086 596.8325 175.8452 594.8647 175.0044 590.2729 c
174.3345 586.6128 175.4941 582.7271 175.0044 578.0962 c
177.8413 577.377 179.7808 577.9102 182.2637 576.6919 c
183.8252 575.9248 184.3765 573.9604 185.5415 573.4136 c
186.5938 572.9189 188.7705 572.8955 189.9907 572.9448 c
196.1138 573.1938 197.8242 578.2817 201.9331 580.2036 c
206.9014 571.9819 212.0591 563.9478 216.9194 555.6167 c
228.6245 562.957 234.1689 576.4575 249.2339 580.438 c
247.1914 586.3179 243.394 590.0693 239.8667 593.7852 c
232.5068 601.5386 224.7993 608.77 218.3242 617.6694 c
215.1621 622.0161 211.5889 627.2788 211.2998 633.5923 c
211.0469 639.1104 212.3477 645.0107 212.9385 650.9204 c
213.1997 653.5337 213.5547 656.5483 213.8755 659.5845 c
214.1724 662.3921 214.9683 665.8057 214.5776 668.4829 c
214.1509 671.4102 210.8369 672.7471 209.1919 675.5073 c
208.5806 676.5337 208.4004 677.3931 208.021 678.3169 c
207.6875 679.1323 207.3965 680.0859 206.6157 680.8931 c
201.5581 680.3101 190.5752 676.5508 189.7573 672.229 C
f
306.1348 603.1519 m
306.1348 603.1519 l
312.3936 602.7539 318.9111 604.0425 324.8682 605.4932 c
330.5078 606.8672 335.8916 608.7939 340.3223 611.1128 c
348.1309 615.2007 355.002 621.3838 361.6309 626.5679 c
365.8643 629.8779 369.1885 633.8076 372.6367 638.0415 c
377.8779 644.4775 382.2188 650.6411 387.1543 657.7109 c
389.4043 660.9341 393.1553 665.4976 393.4766 668.4829 c
393.8789 672.2222 391.9805 676.481 390.4326 679.0195 c
386.4395 685.5708 376.4063 692.5264 366.3135 693.3032 c
358.4336 693.9106 356.1084 689.6836 350.8594 688.6206 c
348.5117 688.145 346.123 688.4902 343.835 688.3862 c
331.9121 687.8447 323.0996 685.1709 315.2666 680.4248 c
311.958 678.4199 308.6719 676.2949 305.1982 675.7417 c
302.3184 675.2827 299.5439 676.376 296.7686 676.21 c
295.1704 676.1143 293.5059 675.2563 291.8511 674.8047 c
286.7666 673.4185 282.0278 672.2534 276.8647 670.8247 c
276.8647 665.646 276.8647 659.6611 276.8647 653.7305 c
276.8647 648.6318 275.8921 640.9746 277.3325 637.105 c
278.2231 634.7144 280.2251 632.8877 282.7188 631.4854 c
284.5942 630.4307 287.3975 628.7778 289.2749 628.4409 c
290.8838 628.1523 293.8618 628.4409 296.3003 628.4409 c
302.1455 628.4409 304.9395 629.1943 307.3057 632.187 c
309.5898 635.0771 310.1934 639.5708 311.7549 643.4272 c
317.6035 641.9307 324.2305 640.1602 326.0381 634.2949 c
326.9658 631.2876 327.3945 624.8496 325.3359 622.353 c
323.1582 619.7109 315.9033 620.48 310.8184 620.48 c
304.8555 620.48 299.5527 620.48 294.1924 620.48 c
294.7344 611.1689 297.2275 603.7183 306.1348 603.1519 C
f
0 D
53.0068 718.8271 m
216.9893 718.8271 381 718.8271 544.9785 718.8271 c
545.8447 718.4341 545.4287 716.709 545.4473 715.5488 c
546.0439 678.1807 545.4463 640.02 545.4473 602.2148 c
545.4482 466.0786 545.4463 328.7686 545.4473 192.668 c
545.4473 183.2402 544.7158 173.8623 544.042 164.8027 c
543.3447 155.4238 543.0049 146.4629 541.2314 138.3428 c
534.3447 106.7842 514.6738 86.9053 488.3115 74.1826 c
474.7295 67.627 459.2988 63.8115 442.417 61.5371 c
425.2246 59.2217 405.8018 60.6904 385.9834 59.8984 c
367.9072 59.1758 349.0654 57.7715 333.0635 54.2783 c
325.4746 52.6221 317.3105 50.4736 310.8184 47.2539 c
304.459 44.0996 298.5459 39.5469 296.7686 32.2676 c
294.104 39.1133 287.8076 43.082 281.0796 45.8486 c
260.5586 54.2891 232.5522 55.6025 204.9771 56.8545 c
195.1221 57.3018 185.6196 56.9521 176.6436 57.5566 c
149.2378 59.4023 126.6313 64.4092 106.396 74.416 c
80.5684 87.1885 61.0791 107.3125 54.8804 139.2793 c
51.6904 155.7266 52.7729 175.5967 52.7729 195.2432 c
52.7729 368.5361 52.7725 544.5557 52.7729 718.1245 c
52.7524 718.457 52.7339 718.7881 53.0068 718.8271 C
f
*U
320.8867 675.9761 m
327.252 673.2866 333.6836 670.6646 339.8535 667.7798 c
340.0488 666.4927 339.2676 666.1807 339.3857 664.9702 c
334.0303 663.6909 329.0391 662.0464 323.6963 660.7549 c
322.8672 665.936 321.6377 670.7153 320.8867 675.9761 C
F
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
